{"version":3,"sources":["../src/utils/resolveShopifyFiles.ts"],"sourcesContent":["const FILES_QUERY = `\n    query getFiles($ids: [ID!]!) {\n    nodes(ids: $ids) {\n        ... on GenericFile {\n        id\n        url\n        mimeType\n        alt\n        originalFileSize\n        previewImage {\n            id\n            url\n        }\n        }\n    }\n    }\n`;\n\nexport async function resolveShopifyFiles(\n  fileIds: string[],\n  fetchShopify: (query: string, variables?: Record<string, any>) => Promise<any>\n): Promise<Record<string, any>> {\n  console.log(\"ðŸ§© Resolving Files\", fileIds);\n\n  const resultMap: Record<string, any> = {};\n  if (fileIds.length === 0) return resultMap;\n\n  try {\n    const res = await fetchShopify(FILES_QUERY, { ids: fileIds });\n    const nodes = res.data?.nodes || [];\n\n    for (const file of nodes) {\n      if (file?.id) {\n        resultMap[file.id] = file;\n      }\n    }\n\n    return resultMap;\n  } catch (err) {\n    console.error(\"Error resolving files:\", err);\n    return resultMap;\n  }\n}\n"],"mappings":";AAAA,IAAM,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBpB,eAAsB,oBACpB,SACA,cAC8B;AAC9B,UAAQ,IAAI,6BAAsB,OAAO;AAEzC,QAAM,YAAiC,CAAC;AACxC,MAAI,QAAQ,WAAW;AAAG,WAAO;AAEjC,MAAI;AACF,UAAM,MAAM,MAAM,aAAa,aAAa,EAAE,KAAK,QAAQ,CAAC;AAC5D,UAAM,QAAQ,IAAI,MAAM,SAAS,CAAC;AAElC,eAAW,QAAQ,OAAO;AACxB,UAAI,MAAM,IAAI;AACZ,kBAAU,KAAK,EAAE,IAAI;AAAA,MACvB;AAAA,IACF;AAEA,WAAO;AAAA,EACT,SAAS,KAAK;AACZ,YAAQ,MAAM,0BAA0B,GAAG;AAC3C,WAAO;AAAA,EACT;AACF;","names":[]}