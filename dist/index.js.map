{"version":3,"sources":["../src/utils/buildMetafieldIdentifiers.ts","../src/index.ts","../src/graphql/client.ts","../src/graphql/queries/getProductByHandle.ts","../src/utils/normalizeMetafields.ts","../src/graphql/queries/getProductById.ts","../src/products/getProduct.ts"],"sourcesContent":["import { CustomMetafieldDefinition } from \"../types/metafields\";\n\nexport function buildMetafieldIdentifiers(\n  metafields: CustomMetafieldDefinition[]\n): string {\n  return metafields\n    .map(({ field }) => {\n      const [namespace, key] = field.split(\".\");\n      return `{ namespace: \"${namespace}\", key: \"${key}\" }`;\n    })\n    .join(\",\\n\");\n}\n","export * from \"./products/getProduct\";\n","const SHOPIFY_GRAPHQL_URL = process.env.SHOPIFY_GRAPHQL_URL!;\nconst SHOPIFY_ACCESS_TOKEN = process.env.SHOPIFY_ACCESS_TOKEN!;\n\nexport async function fetchShopify<T = any>(\n  query: string,\n  variables: Record<string, any> = {}\n): Promise<T> {\n  if (!SHOPIFY_GRAPHQL_URL || !SHOPIFY_ACCESS_TOKEN) {\n    throw new Error(\"Missing Shopify API credentials\");\n  }\n  const res = await fetch(SHOPIFY_GRAPHQL_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-Shopify-Storefront-Access-Token\": SHOPIFY_ACCESS_TOKEN,\n    },\n    body: JSON.stringify({ query, variables }),\n  });\n  const json = await res.json();\n  if (json.errors) {\n    throw new Error(json.errors[0]?.message || \"GraphQL error\");\n  }\n  return json;\n}\n","export const getProductByHandleQuery = (metafieldIdentifiers: string) => `\n  query getProductByHandle($handle: String!) {\n    productByHandle(handle: $handle) {\n      id\n      title\n      handle\n      descriptionHtml\n      featuredImage {\n        originalSrc\n        altText\n      }\n      images(first: 10) {\n        edges {\n          node {\n            originalSrc\n            altText\n          }\n        }\n      }\n      variants(first: 10) {\n        edges {\n          node {\n            id\n            title\n            priceV2 { amount, currencyCode }\n            compareAtPriceV2 { amount, currencyCode }\n            product { title, handle }\n          }\n        }\n      }\n      metafields(identifiers: [${metafieldIdentifiers}]) {\n        key\n        value\n      }\n    }\n  }\n`;\n","type Metafield = { key: string; value: string };\n\nexport function normalizeMetafields(\n  metafields: (Metafield | null)[]\n): Record<string, string> {\n  return metafields.reduce((acc, field) => {\n    if (field?.key) {\n      acc[field.key] = field.value;\n    }\n    return acc;\n  }, {} as Record<string, string>);\n}\n","export const getProductByIdQuery = (metafieldIdentifiers: string) => `\n  query getProductById($id: ID!) {\n    node(id: $id) {\n      ... on Product {\n        id\n        title\n        handle\n        descriptionHtml\n        featuredImage {\n          originalSrc\n          altText\n        }\n        images(first: 10) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 10) {\n          edges {\n            node {\n              id\n              title\n              priceV2 { amount, currencyCode }\n              compareAtPriceV2 { amount, currencyCode }\n              product { title, handle }\n            }\n          }\n        }\n        metafields(identifiers: [${metafieldIdentifiers}]) {\n          key\n          value\n        }\n      }\n    }\n  }\n`;\n","import { fetchShopify } from \"../graphql/client\";\nimport { getProductByHandleQuery } from \"../graphql/queries/getProductByHandle\";\nimport { safeParseArray } from \"../utils/safeParseArray\";\nimport { normalizeMetafields } from \"../utils/normalizeMetafields\";\nimport { CustomMetafieldDefinition } from \"../types/metafields\";\nimport { FetchProductResult, Product } from \"../types/product\";\nimport { getProductByIdQuery } from \"../graphql/queries/getProductById\";\nimport { ImageEdge, VariantEdge } from \"../types/edges\";\n\nexport interface GetProductOptions {\n  id?: string;\n  handle?: string;\n  customMetafields?: CustomMetafieldDefinition[];\n}\n\nexport async function getProduct(\n  options: GetProductOptions\n): Promise<FetchProductResult> {\n  const { handle, id, customMetafields = [] } = options;\n  const metafieldIdentifiers =\n    customMetafields.length > 0\n      ? require(\"../utils/buildMetafieldIdentifiers\").buildMetafieldIdentifiers(\n          customMetafields\n        )\n      : \"\";\n\n  if (!handle && !id) {\n    return { data: null, error: \"Either handle or id must be provided\" };\n  }\n\n  const query = id\n    ? getProductByIdQuery(metafieldIdentifiers)\n    : getProductByHandleQuery(metafieldIdentifiers);\n\n  const variables = id ? { id } : { handle };\n\n  try {\n    const json = await fetchShopify(query, { handle });\n    if (json.errors && json.errors.length > 0) {\n      return { data: null, error: json.errors[0]?.message || \"GraphQL error\" };\n    }\n    const node = json.data?.productByHandle;\n    if (!node) {\n      return { data: null, error: \"Product not found\" };\n    }\n\n    // Normalize metafields using the helper\n    const metafields = normalizeMetafields(node.metafields || []);\n\n    // Process images\n    const images = (node.images.edges ?? []).map((edge: ImageEdge) => ({\n      originalSrc: edge.node.originalSrc,\n      altText: edge.node.altText ?? null,\n    }));\n\n    // Process variants\n    const variants = (node.variants.edges ?? []).map((edge: VariantEdge) => {\n      const variant = edge.node;\n      return {\n        id: variant.id,\n        variantTitle: variant.title,\n        productTitle: variant.product?.title || node.title,\n        price: variant.priceV2,\n        compareAtPrice: variant.compareAtPriceV2 ?? null,\n      };\n    });\n\n    // Use first variant's pricing as default\n    const defaultPrice = variants[0]?.price || {\n      amount: \"0\",\n      currencyCode: \"EUR\",\n    };\n    const defaultCompareAtPrice = variants[0]?.compareAtPrice || null;\n\n    // Build final product\n    const product: Product = {\n      id: node.id,\n      title: node.title,\n      handle: node.handle,\n      descriptionHtml: node.descriptionHtml || \"\",\n      featuredImage: node.featuredImage || null,\n      images,\n      variants,\n      price: defaultPrice,\n      compareAtPrice: defaultCompareAtPrice,\n      metafields,\n    };\n\n    return { data: product, error: null };\n  } catch (err) {\n    return {\n      data: null,\n      error: err instanceof Error ? err.message : \"Unexpected error\",\n    };\n  }\n}\n"],"mappings":"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","names":[]}